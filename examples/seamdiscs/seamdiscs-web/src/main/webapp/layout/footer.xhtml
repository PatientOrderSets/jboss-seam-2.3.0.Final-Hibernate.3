<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:tr="http://myfaces.apache.org/trinidad">

   <script type="text/javascript">
      //<![CDATA[
      var ID;

      function popup(id){
         $("#opaque").toggle();
         $("#" + id).toggle();
         ID = id;
      }

      $(document).ready(function() {
         $(".closeButton").append('[<a href="#" onclick="popup(ID)">close</a>]');
      });
      //]]>
   </script>

   <div id="opaque" onclick="popup(ID)"></div>

   <div id="footer">
      <div class="left">
         <h:outputText value="Powered by "/><a href="http://www.seamframework.org">Seam</a>

         <span class="separator">&#8226;</span>
         <a onclick="popup('creating')" href="#">Creating Seamdiscs</a>

         <span class="separator">&#8226;</span>
         <a onclick="popup('inplace')" href="#">Inplace editing</a>

         <span class="separator">&#8226;</span>
         <a onclick="popup('framework')" href="#">Seam Application Framework</a>

         <span class="separator">&#8226;</span>
         <a onclick="popup('tree')" href="#">Using Trinidad's Tree</a>

         <span class="separator">&#8226;</span>
         <a onclick="popup('skinning')" href="#">Look and Feel</a>

         <span class="separator">&#8226;</span>
         <a onclick="popup('datamodel')" href="#">Enhanced DataModel</a>
      </div>
      <div class="right">
         <h:outputText value="Generated by seam-gen"/>
      </div>
   </div>

   <div class="popupContainer">
      <tr:panelBox background="medium" text="Creating Seamdiscs" styleClass="popup" id="creating">
         <p>This example was built using seam-gen.  To add in Trinidad, the trinidad-api jar was added to
            the ear (and referenced from <code>application.xml</code>) and the trinidad-impl jar,
            <code>jboss-seam-trinidad.jar</code> (Seam-Trinidad integration) &amp; <code>a4j-trinidad.jar</code>
            (RichFaces Ajax-Trinidad integration) were added to <code>WEB-INF/lib</code>.</p>

         <p>A few alterations were needed in <code>web.xml</code> and <code>faces-config.xml</code>.</p>

         <p>The <code>trinidad-config.xml</code> file was used to disable client-side validation for a
            more consistent user experience.</p>

         <p>Of course Trinidad and RichFaces offer some complementary components (e.g. tables, trees)
            - it's up to you which you choose!</p>

         <div class="closeButton"></div>
      </tr:panelBox>

      <tr:panelBox background="medium" text="Inplace editing" styleClass="popup" id="inplace">
         <p>The example also shows how you can use Trinidad components to achieve "in-place" editing - the same views are used to display and edit
            informtation.  A casual visitor to the site navigates around, and see's the components in read only mode;  once logged in,
            these components are editable, and button's are rendered to submit information.</p>

    	   <pre class="source-code"><code>&lt;tr:inputText label=&quot;Artist&quot;
             value=&quot;#<span>{artist.name}</span>&quot;
             readOnly=&quot;#<span>{not identity.loggedIn}</span>&quot;
             required=&quot;true&quot;
             autoSubmit=&quot;true&quot;/&gt;</code></pre>

         <p>Trinidad makes it easy by providing a <code>readOnly</code> attribute for components - but you could easily achieve the
            same using Seam's <code>&lt;s:decorate /&gt;</code> tag.</p>

         <div class="closeButton"></div>
      </tr:panelBox>

      <tr:panelBox background="medium" text="Seam Application Framework" styleClass="popup" id="framework">
         <p>The example uses the Seam Application Framework. Where possible XML is used,
            using extension only where extra functionality is needed.</p>

         <p>An <code>EntityHome</code> and is used for each CRUD, and an <code>EntityQuery</code>
            for clickable lists.</p>

         <p>If you extend <code>EntityHome</code> you can make the component an
            EJB3 stateful session bean by adding <code>@Stateful</code> and a local
            interface. You'll need to declare methods like <code>persist()</code>
            and <code>isManaged()</code> from <code>EntityHome</code> on the
            interface.  The <code>ArtistHome</code> is a stateful session bean in
            this example.</p>

         <p>Each item in the list can be clicked - an <code>&lt;s:link /&gt;</code> and an
            <code>&lt;f:param /&gt;</code> is used to link to the detail view.
            It's wired using <code>pages.xml</code>.
         </p>

         <p>The CRUD page uses the <code>EntityHome</code> object to create, update or
            delete the entity as necessary. <code>pages.xml</code>
            is used to direct the user back to the list view.</p>

         <div class="closeButton"></div>
      </tr:panelBox>

      <tr:panelBox background="medium" text="Using Trinidad's Tree" styleClass="popup" id="tree">
         <p>It's been said that the quality of a tree component is an indication of
            the quality of a component set.  Trinidad has a really robust tree component,
            - but it's <code>TreeModel</code> can be a bit confusing.  Luckily it provides
            a good default implementation - the <code>ChildPropertyTreeModel</code>.</p>

         <p>The <code>ChildPropertyTreeModel</code> takes two parameters - the <code>Collection</code>
            to use for the tree's nodes, and a <code>String</code> property which specifies
            the field or get/set pair to use for accessing each elements child.  If the property
            returns <code>null</code>, then the node is a leaf-node.</p>

         <p>The example uses a slightly modified <code>ChildPropertyTreeModel</code>
            - one that says discs are the leaves of the tree. Different labels are
            rendered depending on the type of node.
         </p>

         <div class="closeButton"></div>
      </tr:panelBox>

      <tr:panelBox background="medium" text="Look and Feel" styleClass="popup" id="skinning">
         <p>Both Trinidad and RichFaces have powerful and mature skinning/theming APIs
            - so you all you need to do is write some CSS!  For seamdiscs, we took a RichFaces
            skin, and adjusted the trinidad skin to fit with it.  To do this, we added
            the skin to <code>trinidad-skins.xml</code>, and told Trinidad to use it in
            <code>trinidad-config.xml</code>.  You can find more information about Trinidad
            skinning on the Trinidad wiki.</p>
         <p>You'll notice that Trinidad and RichFaces components don't provide
            a consistent look-and-feel out of the box - there are plans afoot to improve this!</p>

         <div class="closeButton"></div>
      </tr:panelBox>

      <tr:panelBox background="medium" text="Enhanced DataModel" styleClass="popup" id="datamodel">
         <p>JSF component sets like Trinidad, Tomahawk and IceFaces give you an enhanced
            <code>h:dataTable</code> which has built-in sorting, paging and other goodies.
            However, there is one big flaw - the entire data set is loaded and sorted/paged
            in memory, when really you want to get your persistence layer (be it an ORM or
            just a database) to do this for - a sort translates naturally to an <code>ORDER BY</code>,
            and paging translates naturally to a <code>LIMIT</code> clauses.</p>

         <p>Seam on the other hand provides tight integration to your persistence layer,
            and supports paging and sorting of queries through the <code>Query</code>
            object in the Seam Application Framework - but you have to write a load more JSF
            to get it integrated.  We can get the best of both worlds by using the enhanced
            <code>DataModel</code> in Trinidad, which supports paging and sorting backed by
            a <code>Query</code>.</p>

         <p>The <code>jboss-seam-trinidad.jar</code> (built using the build file in the
            <code>trinidad</code> directory in Seam CVS) provides a <code>DataModel</code>
            which, when backed by a <code>Query</code>, provides lazy loading of data for
            paging, sorting in the persistence context and strong row keys.  You can use
            it by adding the <code>jboss-seam-trinidad.jar</code> to your <code>WEB-INF/lib</code>
            - no need to alter your facelet.  One caveat is that you must ensure the rows property
            on the <code>Query</code> is the same as the <code>maxResults</code> property on
            the <code>Query</code>.  Take a look at the seamdiscs example in the
            <code>trinidad/examples</code> directory to see it in action.</p>
         <pre class="source-code"><code>
&lt;tr:table value=&quot;#<span>{discs.dataModel}</span>&quot; rows=&quot;#<span>{discs.maxResults}</span>&quot;&gt;
   &lt;tr:column&gt;
   ...
   &lt;/tr:column
&lt;/tr:table&gt;</code></pre>

         <div class="closeButton"></div>
      </tr:panelBox>
   </div>
</ui:composition>
