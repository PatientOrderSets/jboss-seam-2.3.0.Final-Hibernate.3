# Language it-IT translations for PACKAGE package.
#
# Automatically generated, 2008.
msgid ""
msgstr ""
"Project-Id-Version: Groovy\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2008-10-14 11:38+0000\n"
"PO-Revision-Date: 2008-12-17 23:50+0100\n"
"Last-Translator: \n"
"Language-Team: Italian <stefano.travelli@gmail.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Lokalize 0.2\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#. Tag: title
#: Groovy.xml:5
#, no-c-format
msgid "Groovy integration"
msgstr "Integrazione con Groovy"

#. Tag: para
#: Groovy.xml:7
#, no-c-format
msgid ""
"One aspect of JBoss Seam is its RAD (Rapid Application Development) "
"capability. While not synonymous with RAD, one interesting tool in this "
"space is dynamic languages. Until recently, choosing a dynamic language was "
"required choosing a completely different development platform (a development "
"platform with a set of APIs and a runtime so great that you would no longer "
"want to use you old legacy Java [sic] APIs anymore, which would be lucky "
"because you would be forced to use those proprietary APIs anyway). Dynamic "
"languages built on top of the Java Virtual Machine, and <ulink url=\"http://"
"groovy.codehaus.org\">Groovy</ulink> in particular broke this approach in "
"silos."
msgstr ""
"Uno degli aspetti di JBoss Seam è la caratteristica RAD (Rapid Application "
"Development). Benché i linguaggi dinamici non siano un sinonimo di RAD, in "
"questo ambito essi sono uno degli aspetti più interessanti. Fino a poco "
"tempo fa scegliere un linguaggio dinamico richiedeva anche di scegliere una "
"piattaforma di sviluppo completamente differente (una piattaforma di "
"sviluppo con un insieme di API ed un ambiente runtime così conveniente da "
"non voler più tornare ad usare le vecchie API Java, con la fortuna di essere "
"costretti ad usare in ogni caso quelle API proprietarie). I linguaggi "
"dinamici costruiti sulla Java Virtual Machine, e <ulink url=\"http://groovy."
"codehaus.org\">Groovy</ulink> in particolare, hanno rotto questo approccio "
"alla grande."

#. Tag: para
#: Groovy.xml:15
#, no-c-format
msgid ""
"JBoss Seam now unites the dynamic language world with the Java EE world by "
"seamlessly integrating both static and dynamic languages. JBoss Seam lets "
"the application developer use the best tool for the task, without context "
"switching. Writing dynamic Seam components is exactly like writing regular "
"Seam components. You use the same annotations, the same APIs, the same "
"everything."
msgstr ""
"Oggi JBoss Seam unisce il mondo dei linguaggi dinamici con il mondo Java EE "
"integrando perfettamente sia i linguaggi statici che quelli dinamici. JBoss "
"Seam lascia che lo sviluppatore scelga il migliore strumento per ciò che "
"deve fare, senza cambiare contesto. Scrivere componenti Seam dinamici è "
"esattamente come scrivere componenti Seam normali. Si usano le stesse "
"annotazioni, le stesse API, lo stesso di tutto."

#. Tag: title
#: Groovy.xml:21
#, no-c-format
msgid "Groovy introduction"
msgstr "Introduzione a Groovy"

#. Tag: para
#: Groovy.xml:23
#, no-c-format
msgid ""
"Groovy is an agile dynamic language based on the Java language but with "
"additional features inspired by Python, Ruby and Smalltalk. The strengths of "
"Groovy are twofold:"
msgstr ""
"Groovy è un linguaggio dinamico agile basato sul linguaggio Java, ma con "
"alcune caratteristiche addizionali ispirate da Python, Ruby e Smalltalk. Il "
"punto di forza di Groovy è duplice:"

#. Tag: para
#: Groovy.xml:28
#, no-c-format
msgid ""
"Java syntax is supported in Groovy: Java code is Groovy code, making the "
"learning curve very smooth"
msgstr ""
"La sintassi Java è supportata in Groovy: il codice Java è codice Groovy, e "
"ciò rende il processo di apprendimento molto semplice."

#. Tag: para
#: Groovy.xml:33
#, no-c-format
msgid ""
"Groovy objects are Java objects, and Groovy classes are Java classes: Groovy "
"integrates smoothly with existing Java libraries and frameworks."
msgstr ""
"Gli oggetti Groovy sono oggetti Java e le classi Groovy sono classi Java: "
"Groovy si integra semplicemente con le librerie e i framework Java esistenti."

#. Tag: para
#: Groovy.xml:38
#, no-c-format
msgid "TODO: write a quick overview of the Groovy syntax add-on"
msgstr ""
"TODO: scrivere un breve riassunto delle caratteristiche specifiche della "
"sintassi Groovy."

#. Tag: title
#: Groovy.xml:42
#, no-c-format
msgid "Writing Seam applications in Groovy"
msgstr "Scrivere applicazioni Seam in Groovy"

#. Tag: para
#: Groovy.xml:44
#, no-c-format
msgid ""
"There is not much to say about it. Since a Groovy object is a Java object, "
"you can virtually write any Seam component, or any class for what it worth, "
"in Groovy and deploy it. You can also mix Groovy classes and Java classes in "
"the same application."
msgstr ""
"Non c'è molto da dire su questo. Poiché un oggetto Groovy è un oggetto Java, "
"è virtualmente possibile scrivere qualsiasi componente Seam, così come "
"qualsiasi altra classe del resto, in Groovy e metterla in funzione. E' anche "
"possibile fare un misto di classi Groovy e classi Java nella stessa "
"applicazione."

#. Tag: title
#: Groovy.xml:49
#, no-c-format
msgid "Writing Groovy components"
msgstr "Scrivere componenti Groovy"

#. Tag: para
#: Groovy.xml:51
#, no-c-format
msgid ""
"As you should have noticed by now, Seam uses annotations heavily. Be sure to "
"use Groovy 1.1 or above for annotation support. Here are some example of "
"groovy code used in a Seam application."
msgstr ""
"Come è stato possibile notare finora, Seam usa pesantemente le annotazioni. "
"Assicurarsi di usare Groovy 1.1 o una versione successiva per avere il "
"supporto delle annotazioni. Di seguito ci sono alcuni esempi di codice "
"Groovy utilizzato in una applicazione Seam."

#. Tag: title
#: Groovy.xml:55
#, no-c-format
msgid "Entity"
msgstr "Entità"

#. Tag: programlisting
#: Groovy.xml:57
#, no-c-format
msgid ""
"@Entity\n"
"    @Name(\"hotel\")\n"
"    class Hotel implements Serializable\n"
"    {\n"
"        @Id @GeneratedValue\n"
"        Long id\n"
"\n"
"        @Length(max=50) @NotNull\n"
"        String name\n"
"\n"
"        @Length(max=100) @NotNull\n"
"        String address\n"
"\n"
"        @Length(max=40) @NotNull\n"
"        String city\n"
"\n"
"        @Length(min=2, max=10) @NotNull\n"
"        String state\n"
"\n"
"        @Length(min=4, max=6) @NotNull\n"
"        String zip\n"
"\n"
"        @Length(min=2, max=40) @NotNull\n"
"        String country\n"
"\n"
"        @Column(precision=6, scale=2)\n"
"        BigDecimal price\n"
"\n"
"        @Override\n"
"        String toString()\n"
"        {\n"
"            return \"Hotel(${name},${address},${city},${zip})\"\n"
"        }\n"
"    }"
msgstr ""
"@Entity\n"
"    @Name(\"hotel\")\n"
"    class Hotel implements Serializable\n"
"    {\n"
"        @Id @GeneratedValue\n"
"        Long id\n"
"\n"
"        @Length(max=50) @NotNull\n"
"        String name\n"
"\n"
"        @Length(max=100) @NotNull\n"
"        String address\n"
"\n"
"        @Length(max=40) @NotNull\n"
"        String city\n"
"\n"
"        @Length(min=2, max=10) @NotNull\n"
"        String state\n"
"\n"
"        @Length(min=4, max=6) @NotNull\n"
"        String zip\n"
"\n"
"        @Length(min=2, max=40) @NotNull\n"
"        String country\n"
"\n"
"        @Column(precision=6, scale=2)\n"
"        BigDecimal price\n"
"\n"
"        @Override\n"
"        String toString()\n"
"        {\n"
"            return \"Hotel(${name},${address},${city},${zip})\"\n"
"        }\n"
"    }"

#. Tag: para
#: Groovy.xml:59
#, no-c-format
msgid ""
"Groovy natively support the notion of properties (getter/setter), so there "
"is no need to explicitly write verbose getters and setters: in the previous "
"example, the hotel class can be accessed from Java as <code>hotel.getCity()</"
"code>, the getters and setters being generated by the Groovy compiler. This "
"type of syntactic sugar makes the entity code very concise."
msgstr ""
"Groovy supporta nativamente il concetto di proprietà (getter/setter), perciò "
"non c'è bisogno di scrivere esplicitamente il ripetitivo codice dei getter e "
"setter: nell'esempio precedente, la classe hotel può essere utilizzata da "
"Java come <code>hotel.getCity()</code>, i metodi getter e setter vengono "
"generati dal compilatore Groovy. Questo tipo di facilitazione sintattica "
"rende il codice delle entità molto conciso."

#. Tag: title
#: Groovy.xml:67
#, no-c-format
msgid "Seam component"
msgstr "Componenti Seam"

#. Tag: para
#: Groovy.xml:69
#, no-c-format
msgid ""
"Writing Seam components in Groovy is in no way different than in Java: "
"annotations are used to mark the class as a Seam component."
msgstr ""
"Scrivere componenti Seam in Groovy non è diverso da farlo in Java: le "
"annotazioni sono utilizzate per marcare la classe come un componente Seam."

#. Tag: programlisting
#: Groovy.xml:72
#, no-c-format
msgid ""
"@Scope(ScopeType.SESSION)\n"
"@Name(\"bookingList\")\n"
"class BookingListAction implements Serializable\n"
"{\n"
"    @In EntityManager em\n"
"    @In User user\n"
"    @DataModel List&lt;Booking&gt; bookings\n"
"    @DataModelSelection Booking booking\n"
"    @Logger Log log\n"
"\n"
"    @Factory public void getBookings()\n"
"    {\n"
"        bookings = em.createQuery('''\n"
"                select b from Booking b\n"
"                where b.user.username = :username\n"
"                order by b.checkinDate''')\n"
"            .setParameter(\"username\", user.username)\n"
"            .getResultList()\n"
"    }\n"
"    \n"
"    public void cancel()\n"
"    {\n"
"        log.info(\"Cancel booking: #{bookingList.booking.id} for #{user."
"username}\")\n"
"        Booking cancelled = em.find(Booking.class, booking.id)\n"
"        if (cancelled != null) em.remove( cancelled )\n"
"        getBookings()\n"
"        FacesMessages.instance().add(\"Booking cancelled for confirmation "
"number #{bookingList.booking.id}\", new Object[0])\n"
"    }\n"
"}"
msgstr ""
"@Scope(ScopeType.SESSION)\n"
"@Name(\"bookingList\")\n"
"class BookingListAction implements Serializable\n"
"{\n"
"    @In EntityManager em\n"
"    @In User user\n"
"    @DataModel List&lt;Booking&gt; bookings\n"
"    @DataModelSelection Booking booking\n"
"    @Logger Log log\n"
"\n"
"    @Factory public void getBookings()\n"
"    {\n"
"        bookings = em.createQuery('''\n"
"                select b from Booking b\n"
"                where b.user.username = :username\n"
"                order by b.checkinDate''')\n"
"            .setParameter(\"username\", user.username)\n"
"            .getResultList()\n"
"    }\n"
"    \n"
"    public void cancel()\n"
"    {\n"
"        log.info(\"Cancel booking: #{bookingList.booking.id} for #{user."
"username}\")\n"
"        Booking cancelled = em.find(Booking.class, booking.id)\n"
"        if (cancelled != null) em.remove( cancelled )\n"
"        getBookings()\n"
"        FacesMessages.instance().add(\"Booking cancelled for confirmation "
"number #{bookingList.booking.id}\", new Object[0])\n"
"    }\n"
"}"

#. Tag: title
#: Groovy.xml:79 Groovy.xml:146
#, no-c-format
msgid "seam-gen"
msgstr "seam-gen"

#. Tag: para
#: Groovy.xml:81
#, no-c-format
msgid ""
"Seam gen has a transparent integration with Groovy. You can write Groovy "
"code in seam-gen backed projects without any additional infrastructure "
"requirement. When writing a Groovy entity, simply place your <filename>."
"groovy</filename> files in <filename>src/main</filename>. Unsurprisingly, "
"when writing an action, simply place your <filename>.groovy</filename> files "
"in <filename>src/hot</filename>."
msgstr ""
"Seam gen ha una integrazione trasparente rispetto a Groovy. E' possibile "
"scrivere codice Groovy in un progetto strutturato da seam-gen senza alcun "
"requisito infrastrutturale addizionale. Se vengono scritte entità in Groovy "
"è sufficiente posizionare i file <filename>.groovy</filename> in <filename>"
"src/main</filename>. Allo stesso modo, quando vengono scritte delle azioni, "
"è sufficiente posizionare i file <filename>.groovy</filename> in <filename>"
"src/hot</filename>."

#. Tag: title
#: Groovy.xml:90
#, no-c-format
msgid "Deployment"
msgstr "Esecuzione"

#. Tag: para
#: Groovy.xml:92
#, no-c-format
msgid ""
"Deploying Groovy classes is very much like deploying Java classes "
"(surprisingly, no need to write nor comply with a 3-letter composite "
"specification to support a multi-language component framework)."
msgstr ""
"Eseguire classi Groovy è molto simile ad eseguire classi Java "
"(soprendentemente non c'è bisogno di scrivere o di essere compatibili con "
"qualche complessa specifica a 3 lettere per supportare più linguaggi nei "
"componenti di framework)."

#. Tag: para
#: Groovy.xml:95
#, no-c-format
msgid ""
"Beyond standard deployments, JBoss Seam has the ability, at development "
"time, to redeploy JavaBeans Seam component classes without having to restart "
"the application, saving a lot of time in the development / test cycle. The "
"same support is provided for GroovyBeans Seam components when the <filename>."
"groovy</filename> files are deployed."
msgstr ""
"Al di là della modalità standard di esecuzione, JBoss Seam ha l'abilità, "
"durante lo sviluppo, di sostituire componenti Seam JavaBeans senza bisogno "
"di riavviare l'applicazione, risparmiando molto tempo nel ciclo di sviluppo "
"e test. Lo stesso supporto è fornito per i componenti Seam GroovyBeans "
"quando i file <filename>.groovy</filename> vengono eseguiti."

#. Tag: title
#: Groovy.xml:101
#, no-c-format
msgid "Deploying Groovy code"
msgstr "Eseguire il codice Groovy"

#. Tag: para
#: Groovy.xml:103
#, no-c-format
msgid ""
"A Groovy class <emphasis>is</emphasis> a Java class, with a bytecode "
"representation just like a Java class. To deploy, a Groovy entity, a Groovy "
"Session bean or a Groovy Seam component, a compilation step is necessary. A "
"common approach is to use the <literal>groovyc</literal> ant task. Once "
"compiles, a Groovy class is in no way different than a Java class and the "
"application server will treat them equally. Note that this allow a seamless "
"mix of Groovy and Java code."
msgstr ""
"Una classe Groovy <emphasis>è</emphasis> una classe Java, con una "
"rappresentazione bytecode esattamente come una classe Java. Per eseguire "
"un'entità Groovy, un Session Bean Groovy o un componente Seam Groovy, è "
"necessario un passaggio di compilazione. Un approccio diffuso è quello di "
"usare il task ant <literal>groovyc</literal>. Una volta compilata, una "
"classe Groovy non presenta alcuna differenza rispetto ad una classe Java e "
"l'application server le tratterà nello stesso modo. Notare che questo "
"consente di utilizzare un misto di codice Groovy e Java."

#. Tag: title
#: Groovy.xml:111
#, no-c-format
msgid "Native .groovy file deployment at development time"
msgstr "Esecuzione di file .groovy durante lo sviluppo"

#. Tag: para
#: Groovy.xml:113
#, no-c-format
msgid ""
"JBoss Seam natively supports the deployment of <literal>.groovy</literal> "
"files (ie without compilation) in incremental hotdeployment mode "
"(development only). This enables a very fast edit/test cycle. To set up ."
"groovy deployments, follow the configuration at <xref linkend="
"\"gettingstarted-hotdeployment\"/> and deploy your Groovy code (<filename>."
"groovy</filename> files) into the <filename>WEB-INF/dev</filename> "
"directory. The GroovyBean components will be picked up incrementally with no "
"need to restart the application (and obviously not the application server "
"either)."
msgstr ""
"JBoss Seam supporta l'esecuzione diretta di file <literal>.groovy</literal> "
"(cioè senza compilazione) nella modalità di hot deployment incrementale (solo "
"per lo sviluppo). Ciò consente un ciclo di modifica/test molto rapido. Per "
"impostare l'esecuzione dei file .groovy, seguire la configurazione indicata "
"in <xref linkend=\"gettingstarted-hotdeployment\"/> ed eseguire il codice "
"Groovy (i file <filename>.groovy</filename>) nella cartella <filename>"
"WEB-INF/dev</filename>. I componenti GroovyBean verranno presi in modo "
"incrementale senza bisogno di riavviare l'applicazione (e ovviamente neanche "
"l'application server)."

#. Tag: para
#: Groovy.xml:120
#, no-c-format
msgid ""
"Be aware that the native .groovy file deployment suffers the same "
"limitations as the regular Seam hotdeployment:"
msgstr ""
"Fare attenzione al fatto che l'esecuzione diretta dei file .groovy soffre "
"delle stesse limitazioni del normale hot deployment di Seam:"

#. Tag: para
#: Groovy.xml:125
#, no-c-format
msgid ""
"The components must be JavaBeans or GroovyBeans. They cannot be EJB3 bean"
msgstr ""
"I componenti devono essere JavaBeans o GroovyBeans. Non possono essere "
"componenti EJB3."

#. Tag: para
#: Groovy.xml:129
#, no-c-format
msgid "Entities cannot be hotdeployed"
msgstr "Le entità non possono essere eseguite in modalità hot deploy."

#. Tag: para
#: Groovy.xml:133
#, no-c-format
msgid ""
"The hot-deployable components will not be visible to any classes deployed "
"outside of <literal>WEB-INF/dev</literal>"
msgstr ""
"I componenti da eseguire in modalità hotdeploy non saranno visibili ad "
"alcuna classe posizionata al di fuori di <literal>WEB-INF/dev</literal>"

#. Tag: para
#: Groovy.xml:138
#, no-c-format
msgid "Seam debug mode must be enabled"
msgstr "La modalità debug di Seam deve essere attivata"

#. Tag: para
#: Groovy.xml:148
#, no-c-format
msgid ""
"Seam-gen transparently supports Groovy files deployment and compilation. "
"This includes the native <filename>.groovy</filename> file deployment in "
"development mode (compilation-less). If you create a seam-gen project of "
"type WAR, Java and Groovy classes in <filename>src/hot</filename> will "
"automatically be candidate for the incremental hot deployment. If you are in "
"production mode, the Groovy files will simply be compiled before deployment."
msgstr ""
"Seam-gen supporta la compilazione e l'esecuzione dei file Groovy in modo "
"trasparente. Questo include l'esecuzione diretta dei file <filename>.groovy<"
"/filename> durante lo sviluppo (senza compilazione). Creando un progetto "
"seam-gen di tipo WAR, le classi Java e Groovy posizionate in <filename>"
"src/hot</filename> saranno automaticamente candidate per l'esecuzione "
"incrementale in modalità hot deploy. In modalità di produzione, i file Groovy "
"saranno semplicemente compilati prima dell'esecuzione."

#. Tag: para
#: Groovy.xml:154
#, no-c-format
msgid ""
"You will find a live example of the Booking demo written completely in "
"Groovy and supporting incremental hot deployment in <filename>examples/"
"groovybooking</filename>."
msgstr ""
"In <filename>examples/groovybooking</filename> è possibile trovare un "
"esempio della demo Booking scritto completamente in Groovy con il supporto "
"per l'esecuzione incrementale in modalità hot deploy"

