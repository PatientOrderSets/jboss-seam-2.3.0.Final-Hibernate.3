# translation of Spring.po to Japanese
# Noriko Mizumoto <noriko@redhat.com>, 2007, 2008, 2009.
msgid ""
msgstr ""
"Project-Id-Version: Spring\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2009-06-11 07:43+0000\n"
"PO-Revision-Date: 2009-03-06 11:51+1000\n"
"Last-Translator: Noriko Mizumoto <noriko@redhat.com>\n"
"Language-Team: Japanese <fedora-trans-ja@redhat.com>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#: Spring.xml:6
#, no-c-format
msgid "Spring Framework integration"
msgstr "Spring Framework 統合"

#. Tag: para
#: Spring.xml:8
#, fuzzy, no-c-format
msgid ""
"The Spring integration (part of the Seam IoC module) allows easy migration "
"of Spring-based projects to Seam and allows Spring applications to take "
"advantage of key Seam features like conversations and Seam's more "
"sophisticated persistence context management."
msgstr ""
"Spring 統合モジュールにより Seam への Spring ベースとするプロジェクトの移植が"
"容易になり、 Spring アプリケーションは対話や Seam の高度な永続コンテキスト管"
"理など Seam の主要な機能を利用することができるようになります。"

#. Tag: para
#: Spring.xml:12
#, no-c-format
msgid ""
"Note! The Spring integration code is included in the jboss-seam-ioc library. "
"This dependency is required for all seam-spring integration techniques "
"covered in this chapter."
msgstr ""
"注意! Spring 統合コードは jboss-seam-ioc ライブラリに含まれています。 この依"
"存性は本章に記載されているすべての seam-spring 統合技術に必要となります。"

#. Tag: para
#: Spring.xml:15
#, no-c-format
msgid "Seam's support for Spring provides the ability to:"
msgstr "Spring の Seam サポートは次のような機能を提供します。"

#. Tag: para
#: Spring.xml:19
#, no-c-format
msgid "inject Seam component instances into Spring beans"
msgstr "Seam コンポーネントインスタンスを Spring Bean にインジェクトする"

#. Tag: para
#: Spring.xml:22
#, no-c-format
msgid "inject Spring beans into Seam components"
msgstr "Spring Bean を Seam コンポーネントにインジェクトする"

#. Tag: para
#: Spring.xml:25
#, no-c-format
msgid "turn Spring beans into Seam components"
msgstr "Spring Bean を Seam コンポーネントに変換する"

#. Tag: para
#: Spring.xml:28
#, no-c-format
msgid "allow Spring beans to live in any Seam context"
msgstr "Spring Bean を Seam コンテキストに配置できるようにする"

#. Tag: para
#: Spring.xml:31
#, no-c-format
msgid "start a spring WebApplicationContext with a Seam component"
msgstr "Seam コンポーネント で Spring Web アプリケーションを起動する"

#. Tag: para
#: Spring.xml:34
#, no-c-format
msgid "Support for Spring PlatformTransactionManagement"
msgstr "Spring PlatformTransactionManagement のサポート"

#. Tag: para
#: Spring.xml:37
#, no-c-format
msgid ""
"provides a Seam managed replacement for Spring's "
"<literal>OpenEntityManagerInViewFilter</literal> and "
"<literal>OpenSessionInViewFilter</literal>"
msgstr ""
"Spring の <literal>OpenEntityManagerInViewFilter</literal> および "
"<literal>OpenSessionInViewFilter</literal> の代替として Seam 管理を提供しま"
"す。"

#. Tag: para
#: Spring.xml:40
#, no-c-format
msgid ""
"Support for Spring <literal>TaskExecutors</literal> to back "
"<literal>@Asynchronous</literal> calls"
msgstr ""
"<literal>@Asynchronous</literal> コールに対応する Spring "
"<literal>TaskExecutors</literal> のサポート"

#. Tag: title
#: Spring.xml:45
#, no-c-format
msgid "Injecting Seam components into Spring beans"
msgstr "Seam コンポーネントを Spring Bean にインジェクトする"

#. Tag: para
#: Spring.xml:47
#, no-c-format
msgid ""
"Injecting Seam component instances into Spring beans is accomplished using "
"the <literal>&lt;seam:instance/&gt;</literal> namespace handler. To enable "
"the Seam namespace handler, the Seam namespace must be added to the Spring "
"beans definition file:"
msgstr ""
"Seam コンポーネントインスタンスの Spring Bean へのインジェクションは、 "
"<literal>&lt;seam:instance/&gt;</literal> 名前空間ハンドラを使用して行いま"
"す。 Seam 名前空間ハンドラを有効にするには、 Seam 名前空間を Spring Bean 定義"
"ファイルに追加しなければなりません。"

#. Tag: programlisting
#: Spring.xml:51
#, fuzzy, no-c-format
msgid ""
"<![CDATA[<beans xmlns=\"http://www.springframework.org/schema/beans\"\n"
"    xmlns:seam=\"http://jboss.org/schema/seam/spring-seam\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n"
"                        http://www.springframework.org/schema/beans/spring-"
"beans-2.0.xsd\n"
"                        http://jboss.org/schema/seam/spring-seam\n"
"                        http://jboss.org/schema/seam/spring-seam-2.3.xsd"
"\">]]>"
msgstr ""
"<![CDATA[<beans xmlns=\"http://www.springframework.org/schema/beans\"\n"
"    xmlns:seam=\"http://jboss.org/schema/seam/spring-seam\"\n"
"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n"
"                        http://www.springframework.org/schema/beans/spring-"
"beans-2.0.xsd\n"
"                        http://jboss.org/schema/seam/spring-seam\n"
"                        http://jboss.org/schema/seam/spring-seam-2.1.xsd"
"\">]]>"

#. Tag: para
#: Spring.xml:53
#, no-c-format
msgid "Now any Seam component may be injected into any Spring bean:"
msgstr ""
"これで、 Seam コンポーネントはいずれの Spring Bean にもインジェクション可能と"
"なりました。"

#. Tag: programlisting
#: Spring.xml:55
#, no-c-format
msgid ""
"<![CDATA[<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\" scope="
"\"prototype\">\n"
"    <property name=\"someProperty\">\n"
"        <seam:instance name=\"someComponent\"/>\n"
"    </property>\n"
"</bean>]]>"
msgstr ""
"<![CDATA[<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\" scope="
"\"prototype\">\n"
"    <property name=\"someProperty\">\n"
"        <seam:instance name=\"someComponent\"/>\n"
"    </property>\n"
"</bean>]]>"

#. Tag: para
#: Spring.xml:57
#, no-c-format
msgid "An EL expression may be used instead of a component name:"
msgstr "コンポーネント名の代わりに EL 式が利用可能です。"

#. Tag: programlisting
#: Spring.xml:59
#, no-c-format
msgid ""
"<![CDATA[<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\" scope="
"\"prototype\">\n"
"    <property name=\"someProperty\">\n"
"        <seam:instance name=\"#{someExpression}\"/>\n"
"    </property>\n"
"</bean>]]>"
msgstr ""
"<![CDATA[<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\" scope="
"\"prototype\">\n"
"    <property name=\"someProperty\">\n"
"        <seam:instance name=\"#{someExpression}\"/>\n"
"    </property>\n"
"</bean>]]>"

#. Tag: para
#: Spring.xml:61
#, no-c-format
msgid ""
"Seam component instances may even be made available for injection into "
"Spring beans by a Spring bean id."
msgstr ""
"Seam コンポーネントインスタンスは、 Spring Bean id で Spring Bean へのイン"
"ジェクションができるようになります。"

#. Tag: programlisting
#: Spring.xml:63
#, no-c-format
msgid ""
"<![CDATA[<seam:instance name=\"someComponent\" id=\"someSeamComponentInstance"
"\"/>\n"
"\n"
"<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\" scope=\"prototype"
"\">\n"
"    <property name=\"someProperty\" ref=\"someSeamComponentInstance\">\n"
"</bean>\n"
"]]>"
msgstr ""
"<![CDATA[<seam:instance name=\"someComponent\" id=\"someSeamComponentInstance"
"\"/>\n"
"\n"
"<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\" scope=\"prototype"
"\">\n"
"    <property name=\"someProperty\" ref=\"someSeamComponentInstance\">\n"
"</bean>\n"
"]]>"

#. Tag: para
#: Spring.xml:65
#, no-c-format
msgid "Now for the caveat!"
msgstr "警告!"

#. Tag: para
#: Spring.xml:67
#, no-c-format
msgid ""
"Seam was designed from the ground up to support a stateful component model "
"with multiple contexts. Spring was not. Unlike Seam bijection, Spring "
"injection does not occur at method invocation time. Instead, injection "
"happens only when the Spring bean is instantiated. So the instance available "
"when the bean is instantiated will be the same instance that the bean uses "
"for the entire life of the bean. For example, if a Seam "
"<literal>CONVERSATION</literal>-scoped component instance is directly "
"injected into a singleton Spring bean, that singleton will hold a reference "
"to the same instance long after the conversation is over! We call this "
"problem <emphasis>scope impedance</emphasis>. Seam bijection ensures that "
"scope impedance is maintained naturally as an invocation flows through the "
"system. In Spring, we need to inject a proxy of the Seam component, and "
"resolve the reference when the proxy is invoked."
msgstr ""
"Seamは複数のコンテキストを持つステートフルなコンポーネントモデルに対応するこ"
"とを基本に設計されました。 Spring はそうではありません。 Seam のバイジェク"
"ションと異なり、 Spring のインジェクションはメソッド呼び出し時に発生しませ"
"ん。 その代わり、 Spring Bean がインスタンス化されるときだけ、 インジェクショ"
"ンは発生します。 従って、 Bean がインスタンス化されるときに利用可能なインスタ"
"ンスは、 Beanのライフサイクル全期間で Bean が使用するものと同じインスタンスで"
"す。 例えば、 Seam <literal>対話</literal> スコープコンポーネントのインスタン"
"スが 直接、 単一の Spring Bean にインジェクトされると、 その単一の Spring "
"Bean はその対話が終了した後もずっと同じインスタンスに対する参照を保持しま"
"す。 この問題を <emphasis>スコープインピーダンス (scope impedance)</"
"emphasis> と呼んでいます。 システム全体に呼び出しが流れるように、 Seam バイイ"
"ンジェクションはスコープインピーダンスが自然に維持されるようにします。 "
"Spring では、 Seam コンポーネントのプロキシをインジェクトすることでプロキシが"
"呼ばれた場合に参照を解決する必要があります。"

#. Tag: para
#: Spring.xml:77
#, no-c-format
msgid ""
"The <literal>&lt;seam:instance/&gt;</literal> tag lets us automatically "
"proxy the Seam component."
msgstr ""
"<literal>&lt;seam:instance/&gt;</literal>  タグで自動的に Seam コンポーネント"
"をプロキシできるようになります。"

#. Tag: programlisting
#: Spring.xml:79
#, no-c-format
msgid ""
"<![CDATA[<seam:instance id=\"seamManagedEM\" name=\"someManagedEMComponent\" "
"proxy=\"true\"/>\n"
"\n"
"<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\">\n"
"    <property name=\"entityManager\" ref=\"seamManagedEM\">\n"
"</bean>]]>"
msgstr ""
"<![CDATA[<seam:instance id=\"seamManagedEM\" name=\"someManagedEMComponent\" "
"proxy=\"true\"/>\n"
"\n"
"<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\">\n"
"    <property name=\"entityManager\" ref=\"seamManagedEM\">\n"
"</bean>]]>"

#. Tag: para
#: Spring.xml:81
#, no-c-format
msgid ""
"This example shows one way to use a Seam-managed persistence context from a "
"Spring bean. (For a more robust way to use Seam-managed persistence contexts "
"as a replacement for the Spring <literal>OpenEntityManagerInView</literal> "
"filter see section on <link linkend=\"spring-persistence\">Using a Seam "
"Managed Persistence Context in Spring</link>)"
msgstr ""
"上記の例では Spring Bean から Seam 管理の永続コンテキストを使用する方法のひと"
"つを示しています。 (Spring <literal>OpenEntityManagerInView</literal> フィル"
"タの代替として Seam 管理の永続コンテキストを使用するより堅牢な方法について"
"は、 <link linkend=\"spring-persistence\">Spring で Seam 管理の永続コンテキス"
"トを使用する</link> のセクションを参照してください。)"

#. Tag: title
#: Spring.xml:88
#, no-c-format
msgid "Injecting Spring beans into Seam components"
msgstr "Spring Bean を Seam コンポーネントにインジェクトする"

#. Tag: para
#: Spring.xml:90
#, no-c-format
msgid ""
"It is even easier to inject Spring beans into Seam component instances. "
"Actually, there are two possible approaches:"
msgstr ""
"Spring Bean を Seam コンポーネントインスタンスにインジェクトするのはさらに簡"
"単です。 実際、 可能な方法は 2 つあります。"

#. Tag: para
#: Spring.xml:95
#, no-c-format
msgid "inject a Spring bean using an EL expression"
msgstr "EL 式を使用して Spring Bean をインジェクトする"

#. Tag: para
#: Spring.xml:98
#, no-c-format
msgid "make the Spring bean a Seam component"
msgstr "Spring Bean を Seam コンポーネントにする"

#. Tag: para
#: Spring.xml:102
#, no-c-format
msgid ""
"We'll discuss the second option in the next section. The easiest approach is "
"to access the Spring beans via EL."
msgstr ""
"次のセクションでは 2 番目の選択肢について説明します。 もっとも容易な方法は "
"EL を使って Spring Bean にアクセスします。"

#. Tag: para
#: Spring.xml:105
#, no-c-format
msgid ""
"The Spring <literal>DelegatingVariableResolver</literal> is an integration "
"point Spring provides for integrating Spring with JSF. This "
"<literal>VariableResolver</literal> makes all Spring beans available in EL "
"by their bean id. You'll need to add the "
"<literal>DelegatingVariableResolver</literal> to <literal>faces-config.xml</"
"literal>:"
msgstr ""
"Spring の <literal>DelegatingVariableResolver</literal> は Spring を JSF と統"
"合する場合に Spring によって提供される統合ポイントになります。 この "
"<literal>VariableResolver</literal> はその Bean ID によって EL ですべての "
"Spring Bean を利用可能にさせることができます。 "
"<literal>DelegatingVariableResolver</literal> を <literal>faces-config.xml</"
"literal> に追加する必要があります。"

#. Tag: programlisting
#: Spring.xml:110
#, no-c-format
msgid ""
"<![CDATA[<application>\n"
"    <variable-resolver>\n"
"        org.springframework.web.jsf.DelegatingVariableResolver\n"
"    </variable-resolver>\n"
"</application>]]>"
msgstr ""
"<![CDATA[<application>\n"
"    <variable-resolver>\n"
"        org.springframework.web.jsf.DelegatingVariableResolver\n"
"    </variable-resolver>\n"
"</application>]]>"

#. Tag: para
#: Spring.xml:112
#, no-c-format
msgid "Then you can inject Spring beans using <literal>@In</literal>:"
msgstr ""
"これを行うと <literal>@In</literal> を使って Spring Bean をインジェクトできる"
"ようになります。"

#. Tag: programlisting
#: Spring.xml:114
#, no-c-format
msgid ""
"<![CDATA[@In(\"#{bookingService}\")\n"
"private BookingService bookingService;]]>"
msgstr ""
"<![CDATA[@In(\"#{bookingService}\")\n"
"private BookingService bookingService;]]>"

#. Tag: para
#: Spring.xml:116
#, no-c-format
msgid ""
"The use of Spring beans in EL is not limited to injection. Spring beans may "
"be used anywhere that EL expressions are used in Seam: process and pageflow "
"definitions, working memory assertions, etc..."
msgstr ""
"EL 式でインジェクションを行うために Spring Bean を使用することに制限はありま"
"せん。 Seam で EL 式が使用されるところならどこでも Spring Bean を使用すること"
"ができます。 プロセスとページフロー定義、 ワーキングメモリアサーションなど。"

#. Tag: title
#: Spring.xml:122
#, no-c-format
msgid "Making a Spring bean into a Seam component"
msgstr "Spring Bean を Seam コンポーネントにする"

#. Tag: para
#: Spring.xml:124
#, no-c-format
msgid ""
"The <literal>&lt;seam:component/&gt;</literal> namespace handler can be used "
"to make any Spring bean a Seam component. Just place the <literal>&lt;seam:"
"component/&gt;</literal> tag within the declaration of the bean that you "
"wish to be a Seam component:"
msgstr ""
"<literal>&lt;seam:component/&gt;</literal> 名前空間ハンドラを使用すると、 ど"
"んな Spring Bean でも Seam コンポーネントにすることができます。 Seam コンポー"
"ネントにしたい Bean の宣言内に <literal>&lt;seam:component/&gt;</literal> タ"
"グを配置するだけです。"

#. Tag: programlisting
#: Spring.xml:128
#, no-c-format
msgid ""
"<![CDATA[<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\" scope="
"\"prototype\">\n"
"    <seam:component/>\n"
"</bean>]]>"
msgstr ""
"<![CDATA[<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\" scope="
"\"prototype\">\n"
"    <seam:component/>\n"
"</bean>]]>"

#. Tag: para
#: Spring.xml:130
#, no-c-format
msgid ""
"By default, <literal>&lt;seam:component/&gt;</literal> will create a "
"<literal>STATELESS</literal> Seam component with class and name provided in "
"the bean definition. Occasionally, such as when a <literal>FactoryBean</"
"literal> is used, the class of the Spring bean may not be the class "
"appearing in the bean definition. In such cases the <literal>class</literal> "
"should be explicitly specified. A Seam component name may be explicitly "
"specified in cases where there is potential for a naming conflict."
msgstr ""
"デフォルトでは、 <literal>&lt;seam:component/&gt;</literal>は Bean 定義で与え"
"られるクラスと名前を付けて <literal>STATELESS</literal>コンポーネントを生成し"
"ます。 ときおり、<literal>FactoryBean</literal> が使用される場合など、 "
"Spring Bean のクラス が Bean 定義に出てくるクラスではないことがあります。 こ"
"のような場合、 <literal>class</literal> は明示的に指定されなければなりませ"
"ん。 名前付けに競合の可能性がある場合、 Seam コンポーネント名を明示的に指定し"
"ても構いません。"

#. Tag: para
#: Spring.xml:136
#, no-c-format
msgid ""
"The <literal>scope</literal> attribute of <literal>&lt;seam:component/&gt;</"
"literal> may be used if you wish the Spring bean to be managed in a "
"particular Seam scope. The Spring bean must be scoped to <literal>prototype</"
"literal> if the Seam scope specified is anything other than "
"<literal>STATELESS</literal>. Pre-existing Spring beans usually have a "
"fundamentally stateless character, so this attribute is not usually needed."
msgstr ""
"Spring Bean を特定の Seam スコープで管理したい場合、 <literal>&lt;seam:"
"component/&gt;</literal> の <literal>scope</literal> 属性を使用することができ"
"ます。 指定される Seam スコープが <literal>STATELESS</literal> ではない場"
"合、 Spring Bean は <literal>prototype</literal> にスコープされなければなりま"
"せん。 既にある Spring Bean は通常ステートレスな特徴を基本的に持っていますの"
"で、 この属性は一般的には不要になります。"

#. Tag: title
#: Spring.xml:145
#, no-c-format
msgid "Seam-scoped Spring beans"
msgstr "Seam スコープの Spring Bean"

#. Tag: para
#: Spring.xml:147
#, no-c-format
msgid ""
"The Seam integration package also lets you use Seam's contexts as Spring 2.0 "
"style custom scopes. This lets you declare any Spring bean in any of Seam's "
"contexts. However, note once again that Spring's component model was never "
"architected to support statefulness, so please use this feature with great "
"care. In particular, clustering of session or conversation scoped Spring "
"beans is deeply problematic, and care must be taken when injecting a bean or "
"component from a wider scope into a bean of a narrower scope."
msgstr ""
"Seam 統合パッケージにより Seam のコンテキストを Spring 2.0 スタイルのカスタム"
"スコープとして使用することもできるようになります。 これによりいずれの Seam コ"
"ンテキスト内でもあらゆる Spring Bean を宣言することができるようになります。 "
"ただし、 Spring のコンポーネントモデルはステートフル性に対応するようには設計"
"されたことはないため、 この機能を使用する際は十分に気を付けてください。 特"
"に、 セッションや対話スコープの Spring Bean のクラスタ化は根深い問題があるた"
"め、 広いスコープの Bean やコンポーネントをスコープの狭い Bean にインジェクト"
"する場合は注意が必要です。"

#. Tag: para
#: Spring.xml:153
#, no-c-format
msgid ""
"By specifying <literal>&lt;seam:configure-scopes/&gt;</literal> once in a "
"Spring bean factory configuration, all of the Seam scopes will be available "
"to Spring beans as custom scopes. To associate a Spring bean with a "
"particular Seam scope, specify the Seam scope in the <literal>scope</"
"literal> attribute of the bean definition."
msgstr ""
"Spring Bean factory 設定で<literal>&lt;seam:configure-scopes/&gt;</literal> "
"を一度指定すると、 すべての Seam スコープがカスタムスコープとして Spring "
"Bean に利用可能になります。 Spring Bean を特定の Seam スコープに関連付けるに"
"は、 Bean 定義の <literal>scope</literal> 属性で Seam スコープを指定してくだ"
"さい。"

#. Tag: programlisting
#: Spring.xml:158
#, no-c-format
msgid ""
"<![CDATA[<!-- Only needs to be specified once per bean factory-->\n"
"<seam:configure-scopes/>\n"
"\n"
"...\n"
"\n"
"<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\" scope=\"seam."
"CONVERSATION\"/>]]>"
msgstr ""
"<![CDATA[<!-- Only needs to be specified once per bean factory-->\n"
"<seam:configure-scopes/>\n"
"\n"
"...\n"
"\n"
"<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\" scope=\"seam."
"CONVERSATION\"/>]]>"

#. Tag: para
#: Spring.xml:160
#, no-c-format
msgid ""
"The prefix of the scope name may be changed by specifying the "
"<literal>prefix</literal> attribute in the <literal>configure-scopes</"
"literal> definition. (The default prefix is <literal>seam.</literal>)"
msgstr ""
"<literal>configure-scopes</literal> 定義内の <literal>prefix</literal> 属性を"
"指定することによって、 スコープ名のプレフィックスを変更することができます。 "
"(デフォルトのプレフィックスは <literal>seam.</literal> です。)"

#. Tag: para
#: Spring.xml:163
#, no-c-format
msgid ""
"By default an instance of a Spring Component registered in this way is not "
"automatically created when referenced using <literal>@In</literal>. To have "
"an instance auto-created you must either specify <literal>@In(create=true)</"
"literal> at the injection point to identify a specific bean to be auto "
"created or you can use the <literal>default-auto-create</literal> attribute "
"of <literal>configure-scopes</literal> to make all spring beans who use a "
"seam scope auto created."
msgstr ""
"デフォルトではこの方法で登録される Spring コンポーネントのインスタンスは "
"<literal>@In</literal> を使って参照される場合に自動的には作成されません。 イ"
"ンスタンスを自動作成させるにはインジェクションポイントで <literal>@In"
"(create=true)</literal> を指定して自動作成される特定 Bean を識別するか、 "
"<literal>configure-scopes</literal> の <literal>default-auto-create</"
"literal> 属性を使って Seam スコープを使用する Spring Bean はすべて自動作成さ"
"れるようにします。"

#. Tag: para
#: Spring.xml:168
#, no-c-format
msgid ""
"Seam-scoped Spring beans defined this way can be injected into other Spring "
"beans without the use of <literal>&lt;seam:instance/&gt;</literal>. However, "
"care must be taken to ensure scope impedance is maintained. The normal "
"approach used in Spring is to specify <literal>&lt;aop:scoped-proxy/&gt;</"
"literal> in the bean definition. However, Seam-scoped Spring beans are "
"<emphasis>not</emphasis> compatible with <literal>&lt;aop:scoped-proxy/&gt;</"
"literal>. So if you need to inject a Seam-scoped Spring bean into a "
"singleton, <literal>&lt;seam:instance/&gt;</literal> must be used:"
msgstr ""
"この方法で定義された Seam スコープの Spring Bean は、 <literal>&lt;seam:"
"instance/&gt;</literal> を使用することなく他の Spring Bean にインジェクト可能"
"です。 ただし、 スコープインピーダンスが必ず維持されるよう十分に注意してくだ"
"さい。 Spring で一般的に使用される方法は、 Bean 定義内での <literal>&lt;aop:"
"scoped-proxy/&gt;</literal> の指定です。 しかし、 Seamスコープの Spring Bean "
"は <literal>&lt;aop:scoped-proxy/&gt;</literal> との<emphasis>互換性がありま"
"せん</emphasis>。 したがって、 単一の Bean に Seam スコープ Spring Beanをイン"
"ジェクトする必要がある場合、 <literal>&lt;seam:instance/&gt;</literal>を使用"
"しなければなりません。"

#. Tag: programlisting
#: Spring.xml:176
#, no-c-format
msgid ""
"<![CDATA[<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\" scope="
"\"seam.CONVERSATION\"/>\n"
"\n"
"...\n"
"\n"
"<bean id=\"someSingleton\">\n"
"    <property name=\"someSeamScopedSpringBean\">\n"
"        <seam:instance name=\"someSpringBean\" proxy=\"true\"/>\n"
"    </property>\n"
"</bean>]]>"
msgstr ""
"<![CDATA[<bean id=\"someSpringBean\" class=\"SomeSpringBeanClass\" scope="
"\"seam.CONVERSATION\"/>\n"
"\n"
"...\n"
"\n"
"<bean id=\"someSingleton\">\n"
"    <property name=\"someSeamScopedSpringBean\">\n"
"        <seam:instance name=\"someSpringBean\" proxy=\"true\"/>\n"
"    </property>\n"
"</bean>]]>"

#. Tag: title
#: Spring.xml:180
#, no-c-format
msgid "Using Spring PlatformTransactionManagement"
msgstr "Spring の PlatformTransactionManagement を使用する"

#. Tag: para
#: Spring.xml:182
#, no-c-format
msgid ""
"Spring provides an extensible transaction management abstraction with "
"support for many transaction APIs (JPA, Hibernate, JDO, and JTA) Spring also "
"provides tight integrations with many application server TransactionManagers "
"such as Websphere and Weblogic. Spring transaction management exposes "
"support for many advanced features such as nested transactions and supports "
"full Java EE transaction propagation rules like REQUIRES_NEW and "
"NOT_SUPPORTED. For more information see the spring documentation <ulink url="
"\"http://static.springframework.org/spring/docs/2.0.x/reference/transaction."
"html\">here</ulink>."
msgstr ""
"Spring は拡張可能なトランザクション管理抽象を提供し、 多くのトランザクション "
"API (JPA、 Hibernate、 JDO、 JTA など) に対応します。 また、 Spring は "
"Websphere や Weblogic などの多くのアプリケーションサーバーの "
"TransactionManagers との堅固な統合を実現します。 Spring トランザクション管理"
"はネストされるトランザクションなど多くの高度な機能のサポートを提供し、 "
"REQUIRES_NEW や NOT_SUPPORTED のような完全 Java EE トランザクション伝播のルー"
"ルに対応します。 詳細については Spring のドキュメント <ulink url=\"http://"
"static.springframework.org/spring/docs/2.0.x/reference/transaction.html\">こ"
"こ</ulink> を参照してください。"

#. Tag: para
#: Spring.xml:190
#, no-c-format
msgid ""
"To configure Seam to use Spring transactions enable the SpringTransaction "
"component like so:"
msgstr ""
"Seam が Spring のトランザクションを使用するよう設定するには、 "
"SpringTransaction コンポーネントを以下のように有効にします。"

#. Tag: programlisting
#: Spring.xml:192
#, no-c-format
msgid ""
"<![CDATA[<spring:spring-transaction platform-transaction-manager=\"#"
"{transactionManager}\"/>]]>"
msgstr ""
"<![CDATA[<spring:spring-transaction platform-transaction-manager=\"#"
"{transactionManager}\"/>]]>"

#. Tag: para
#: Spring.xml:194
#, no-c-format
msgid ""
"The <literal>spring:spring-transaction</literal> component will utilize "
"Springs transaction synchronization capabilities for synchronization "
"callbacks."
msgstr ""
"<literal>spring:spring-transaction</literal> コンポーネントは同期のコールバッ"
"クに Spring トランザクション同期の機能を利用します。"

#. Tag: title
#: Spring.xml:200
#, no-c-format
msgid "Using a Seam Managed Persistence Context in Spring"
msgstr "Spring で Seam 管理の永続コンテキストを使用する"

#. Tag: para
#: Spring.xml:202
#, no-c-format
msgid ""
"One of the most powerful features of Seam is its conversation scope and the "
"ability to have an EntityManager open for the life of a conversation. This "
"eliminates many of the problems associated with the detachment and re-"
"attachment of entities as well as mitigates occurrences of the dreaded "
"<literal>LazyInitializationException</literal>. Spring does not provide a "
"way to manage an persistence context beyond the scope of a single web "
"request (<literal>OpenEntityManagerInViewFilter</literal>). So, it would be "
"nice if Spring developers could have access to a Seam managed persistence "
"context using all of the same tools Spring provides for integration with JPA"
"(e.g. <literal>PersistenceAnnotationBeanPostProcessor</literal>, "
"<literal>JpaTemplate</literal>, etc.)"
msgstr ""
"Seam のパワフルな機能のひとつにその対話スコープと対話が生きている間 "
"EntityManager をオープンにしておく機能があります。 これによりエンティティの分"
"離や再併合に関連する多くの問題が解消され、 深刻な "
"<literal>LazyInitializationException</literal> の発生を軽減することができま"
"す。 Spring は Web の一要求のスコープを越えて永続コンテキストを管理する方法は"
"提供していません (<literal>OpenEntityManagerInViewFilter</literal>)。 このた"
"め、 Spring が JPA との統合に提供しているのとすべて同じツールを使った Seam 管"
"理の永続コンテキストへのアクセスを Spring 開発者に持たせることができるとよい"
"でしょう (<literal>PersistenceAnnotationBeanPostProcessor</literal>、 "
"<literal>JpaTemplate</literal> など)。"

#. Tag: para
#: Spring.xml:212
#, no-c-format
msgid ""
"Seam provides a way for Spring to access a Seam managed persistence context "
"with Spring's provided JPA tools bringing conversation scoped persistence "
"context capabilities to Spring applications."
msgstr ""
"Seam は提供される JPA ツールを使って Spring が Seam 管理永続コンテキストにア"
"クセスする方法を提供します。 これにより Spring アプリケーションに対して対話ス"
"コープの永続コンテキスト機能を実現します。"

#. Tag: para
#: Spring.xml:216
#, no-c-format
msgid "This integration work provides the following functionality:"
msgstr "この統合作業により次のような機能を実現します。"

#. Tag: para
#: Spring.xml:220
#, no-c-format
msgid ""
"transparent access to a Seam managed persistence context using Spring "
"provided tools"
msgstr ""
"Spring 提供ツールを使った Seam 管理永続コンテキストへの透過的なアクセス"

#. Tag: para
#: Spring.xml:223
#, no-c-format
msgid ""
"access to Seam conversation scoped persistence contexts in a non web request "
"(e.g. asynchronous quartz job)"
msgstr ""
"Web 要求以外での Seam 対話スコープ永続コンテキストへのアクセス (非同期の "
"quartz ジョブなど)"

#. Tag: para
#: Spring.xml:227
#, no-c-format
msgid ""
"allows for using Seam managed persistence contexts with Spring managed "
"transactions (will need to flush the persistence context manually)"
msgstr ""
"Seam 管理永続コンテキストと Spring 管理トランザクションとの併用が可能 (手作業"
"による永続コンテキストのフラッシュが必要)"

#. Tag: para
#: Spring.xml:232
#, no-c-format
msgid ""
"Spring's persistence context propagation model allows only one open "
"EntityManager per EntityManagerFactory so the Seam integration works by "
"wrapping an EntityManagerFactory around a Seam managed persistence context."
msgstr ""
"Spring の永続コンテキスト伝播モデルは EntityManagerFactory ごと一つの "
"EntityManager しかオープンにしないため、 Seam 統合は EntityManagerFactory を "
"Seam 管理永続コンテキストでラップすることで動作します。"

#. Tag: programlisting
#: Spring.xml:236
#, no-c-format
msgid ""
"<![CDATA[<bean id=\"seamEntityManagerFactory\" class=\"org.jboss.seam.ioc."
"spring.SeamManagedEntityManagerFactoryBean\">\n"
"           <property name=\"persistenceContextName\" value=\"entityManager\"/"
">\n"
"</bean>]]>"
msgstr ""
"<![CDATA[<bean id=\"seamEntityManagerFactory\" class=\"org.jboss.seam.ioc."
"spring.SeamManagedEntityManagerFactoryBean\">\n"
"           <property name=\"persistenceContextName\" value=\"entityManager\"/"
">\n"
"</bean>]]>"

#. Tag: para
#: Spring.xml:238
#, no-c-format
msgid ""
"Where 'persistenceContextName' is the name of the Seam managed persistence "
"context component. By default this EntityManagerFactory has a unitName equal "
"to the Seam component name or in this case 'entityManager'. If you wish to "
"provide a different unitName you can do so by providing a "
"persistenceUnitName like so:"
msgstr ""
"「persistenceContextName」は Seam 管理の永続コンテキストコンポーネントの名前"
"になります。 デフォルトではこの EntityManagerFactory には Seam コンポーネント"
"名と同等の unitName があり、 この場合は「entityManager」になります。 別の "
"unitName を与えたい場合は次のようにして persistenceUnitName を与えることがで"
"きます。"

#. Tag: programlisting
#: Spring.xml:243
#, no-c-format
msgid ""
"<![CDATA[<bean id=\"seamEntityManagerFactory\" class=\"org.jboss.seam.ioc."
"spring.SeamManagedEntityManagerFactoryBean\">\n"
"           <property name=\"persistenceContextName\" value=\"entityManager\"/"
">\n"
"        <property name=\"persistenceUnitName\" value=\"bookingDatabase:"
"extended\"/>\n"
"</bean>]]>"
msgstr ""
"<![CDATA[<bean id=\"seamEntityManagerFactory\" class=\"org.jboss.seam.ioc."
"spring.SeamManagedEntityManagerFactoryBean\">\n"
"           <property name=\"persistenceContextName\" value=\"entityManager\"/"
">\n"
"        <property name=\"persistenceUnitName\" value=\"bookingDatabase:"
"extended\"/>\n"
"</bean>]]>"

#. Tag: para
#: Spring.xml:245
#, no-c-format
msgid ""
"This EntityManagerFactory can then be used in any Spring provided tools. For "
"example, using Spring's <literal>PersistenceAnnotationBeanPostProcessor</"
"literal> is the exact same as before."
msgstr ""
"これでこの EntityManagerFactory をいずれの Spring 提供のツールでも使用するこ"
"とができるようになります。 たとえば、 Spring の "
"<literal>PersistenceAnnotationBeanPostProcessor</literal> を使用すると前と"
"まったく同じになります。"

#. Tag: programlisting
#: Spring.xml:248
#, no-c-format
msgid ""
"<![CDATA[<bean class=\"org.springframework.orm.jpa.support."
"PersistenceAnnotationBeanPostProcessor\"/>]]>"
msgstr ""
"<![CDATA[<bean class=\"org.springframework.orm.jpa.support."
"PersistenceAnnotationBeanPostProcessor\"/>]]>"

#. Tag: para
#: Spring.xml:250
#, no-c-format
msgid ""
"If you define your real EntityManagerFactory in Spring but wish to use a "
"Seam managed persistence context you can tell the "
"<literal>PersistenceAnnotationBeanPostProcessor</literal> which "
"persistenctUnitName you wish to use by default by specifying the "
"<literal>defaultPersistenceUnitName</literal> property."
msgstr ""
"Spring では実際の EntityManagerFactory を定義するが Seam 管理の永続コンテキス"
"トを使用したい場合は <literal>defaultPersistenceUnitName</literal> プロパティ"
"を指定してデフォルトで使用したい persistenctUnitName を "
"<literal>PersistenceAnnotationBeanPostProcessor</literal> に指示することがで"
"きます。"

#. Tag: para
#: Spring.xml:255
#, no-c-format
msgid "The <literal>applicationContext.xml</literal> might look like:"
msgstr ""
"<literal>applicationContext.xml</literal> は次に似たようなものになります。"

#. Tag: programlisting
#: Spring.xml:256
#, no-c-format
msgid ""
"<![CDATA[<bean id=\"entityManagerFactory\" class=\"org.springframework.orm."
"jpa.LocalEntityManagerFactoryBean\">\n"
"        <property name=\"persistenceUnitName\" value=\"bookingDatabase\"/>\n"
"</bean>\n"
"<bean id=\"seamEntityManagerFactory\" class=\"org.jboss.seam.ioc.spring."
"SeamManagedEntityManagerFactoryBean\">\n"
"           <property name=\"persistenceContextName\" value=\"entityManager\"/"
">\n"
"        <property name=\"persistenceUnitName\" value=\"bookingDatabase:"
"extended\"/>\n"
"</bean>\n"
"<bean class=\"org.springframework.orm.jpa.support."
"PersistenceAnnotationBeanPostProcessor\">\n"
"        <property name=\"defaultPersistenceUnitName\" value="
"\"bookingDatabase:extended\"/>\n"
"</bean>]]>"
msgstr ""
"<![CDATA[<bean id=\"entityManagerFactory\" class=\"org.springframework.orm."
"jpa.LocalEntityManagerFactoryBean\">\n"
"        <property name=\"persistenceUnitName\" value=\"bookingDatabase\"/>\n"
"</bean>\n"
"<bean id=\"seamEntityManagerFactory\" class=\"org.jboss.seam.ioc.spring."
"SeamManagedEntityManagerFactoryBean\">\n"
"           <property name=\"persistenceContextName\" value=\"entityManager\"/"
">\n"
"        <property name=\"persistenceUnitName\" value=\"bookingDatabase:"
"extended\"/>\n"
"</bean>\n"
"<bean class=\"org.springframework.orm.jpa.support."
"PersistenceAnnotationBeanPostProcessor\">\n"
"        <property name=\"defaultPersistenceUnitName\" value="
"\"bookingDatabase:extended\"/>\n"
"</bean>]]>"

#. Tag: para
#: Spring.xml:258
#, no-c-format
msgid "The <literal>component.xml</literal> might look like:"
msgstr "<literal>component.xml</literal> は次に似たようなものになります。"

#. Tag: programlisting
#: Spring.xml:259
#, no-c-format
msgid ""
"<![CDATA[<persistence:managed-persistence-context name=\"entityManager\"\n"
"        auto-create=\"true\" entity-manager-factory=\"#{entityManagerFactory}"
"\"/>]]>"
msgstr ""
"<![CDATA[<persistence:managed-persistence-context name=\"entityManager\"\n"
"        auto-create=\"true\" entity-manager-factory=\"#{entityManagerFactory}"
"\"/>]]>"

#. Tag: para
#: Spring.xml:262
#, no-c-format
msgid ""
"<literal>JpaTemplate</literal> and <literal>JpaDaoSupport</literal> are "
"configured the same way for a Seam managed persistence context as they would "
"be fore a Seam managed persistence context."
msgstr ""
"<literal>JpaTemplate</literal> および <literal>JpaDaoSupport</literal> は "
"Seam 管理永続コンテキスト用となるため、 Seam 管理永続コンテキストに対して同じ"
"方法で設定します。"

#. Tag: programlisting
#: Spring.xml:265
#, no-c-format
msgid ""
"<![CDATA[<bean id=\"bookingService\" class=\"org.jboss.seam.example.spring."
"BookingService\">\n"
"        <property name=\"entityManagerFactory\" ref="
"\"seamEntityManagerFactory\"/>\n"
"</bean>]]>"
msgstr ""
"<![CDATA[<bean id=\"bookingService\" class=\"org.jboss.seam.example.spring."
"BookingService\">\n"
"        <property name=\"entityManagerFactory\" ref="
"\"seamEntityManagerFactory\"/>\n"
"</bean>]]>"

#. Tag: title
#: Spring.xml:268
#, no-c-format
msgid "Using a Seam Managed Hibernate Session in Spring"
msgstr "Spring で Seam 管理の Hibernate セッションを使用する"

#. Tag: para
#: Spring.xml:270
#, no-c-format
msgid ""
"The Seam Spring integration also provides support for complete access to a "
"Seam managed Hibernate session using spring's tools. This integration is "
"very similar to the <link linkend=\"spring-persistence\">JPA integration</"
"link>."
msgstr ""
"Seam Spring 統合により Spring のツールを使った Seam 管理 Hibernate セッション"
"への完全アクセスに対応することもできます。 この統合は <link linkend=\"spring-"
"persistence\">JPA 統合</link> に非常に似ています。"

#. Tag: para
#: Spring.xml:273
#, no-c-format
msgid ""
"Like Spring's JPA integration spring's propagation model allows only one "
"open EntityManager per EntityManagerFactory per transaction??? to be "
"available to spring tools. So, the Seam Session integration works by "
"wrapping a proxy SessionFactory around a Seam managed Hibernate session "
"context."
msgstr ""
"Spring の JPA 統合と同様に Spring の伝播モデルは一トランザクションの一"
"EntityManagerFactory ごとに一つの EntityManager しか Spring ツールに対して利"
"用できるようオープンにしません。 このため、 Seam Session 統合は proxy "
"SessionFactory を Seam 管理の Hibernate セッションコンテキストでラップするこ"
"とにより動作します。"

#. Tag: programlisting
#: Spring.xml:278
#, no-c-format
msgid ""
"<![CDATA[<bean id=\"seamSessionFactory\" class=\"org.jboss.seam.ioc.spring."
"SeamManagedSessionFactoryBean\">\n"
"        <property name=\"sessionName\" value=\"hibernateSession\"/>\n"
"</bean>]]>"
msgstr ""
"<![CDATA[<bean id=\"seamSessionFactory\" class=\"org.jboss.seam.ioc.spring."
"SeamManagedSessionFactoryBean\">\n"
"        <property name=\"sessionName\" value=\"hibernateSession\"/>\n"
"</bean>]]>"

#. Tag: para
#: Spring.xml:280
#, no-c-format
msgid ""
"Where 'sessionName' is the name of the <literal>persistence:managed-"
"hibernate-session</literal> component. This SessionFactory can then be used "
"in any Spring provided tools. The integration also provides support for "
"calls to <literal>SessionFactory.getCurrentInstance()</literal> as long as "
"you call getCurrentInstance() on the <literal>SeamManagedSessionFactory</"
"literal>."
msgstr ""
"「sessionName」は <literal>persistence:managed-hibernate-session</literal> コ"
"ンポーネントの名前になります。 これでこの SessionFactory はいずれの Spring 提"
"供ツールでも使用することができるようになります。 この統合は "
"<literal>SeamManagedSessionFactory</literal> で getCurrentInstance() を呼び出"
"している場合であれば <literal>SessionFactory.getCurrentInstance()</literal> "
"に対する呼び出しにも対応します。"

#. Tag: title
#: Spring.xml:286
#, no-c-format
msgid "Spring Application Context as a Seam Component"
msgstr "Seam コンポーネントとしての Spring Application Context"

#. Tag: para
#: Spring.xml:288
#, no-c-format
msgid ""
"Although it is possible to use the Spring <literal>ContextLoaderListener</"
"literal> to start your application's Spring ApplicationContext there are a "
"couple of limitations."
msgstr ""
"アプリケーションの持つ Spring の ApplicationContext を起動するために Spring "
"の <literal>ContextLoaderListener</literal> を使用することはできますが、 制約"
"がいくつかあります。"

#. Tag: para
#: Spring.xml:293
#, no-c-format
msgid ""
"the Spring ApplicationContext must be started <emphasis>after</emphasis> the "
"<literal>SeamListener</literal>"
msgstr ""
"Spring ApplicationContext は、 <literal>SeamListener</literal>の<emphasis>後"
"に</emphasis>起動されなければなりません。"

#. Tag: para
#: Spring.xml:297
#, no-c-format
msgid ""
"it can be tricky starting a Spring ApplicationContext for use in Seam unit "
"and integration tests"
msgstr ""
"Seam ユニットおよび統合テストでの使用を目的とした Spring ApplicationContext "
"の起動は厄介なことがあります。"

#. Tag: para
#: Spring.xml:302
#, no-c-format
msgid ""
"To overcome these two limitations the Spring integration includes a Seam "
"component that will start a Spring ApplicationContext. To use this Seam "
"component place the <literal>&lt;spring:context-loader/&gt;</literal> "
"definition in the <literal>components.xml</literal>. Specify your Spring "
"context file location in the <literal>config-locations</literal> attribute. "
"If more than one config file is needed you can place them in the nested "
"<literal>&lt;spring:config-locations/&gt;</literal> element following "
"standard <literal>components.xml</literal> multi value practices."
msgstr ""
"これら 2 つの制約を克服するために Spring 統合には Spring ApplicationContext "
"を起動する Seam コンポーネントが含まれています。 この Seam コンポーネントを使"
"用するには、 <literal>&lt;spring:context-loader/&gt;</literal> の定義を "
"<literal>components.xml</literal> に配置します。 <literal>config-locations</"
"literal> 属性で使用する Spring コンテキストファイルの場所を指定します。 複数"
"の設定ファイルが必要な場合は、 ネストされる <literal>&lt;spring:config-"
"locations/&gt;</literal> エレメントに配置することができます。 これを行うに"
"は、 <literal>components.xml</literal> ファイルに複数の値エレメントを追加する"
"基準に従ってください。"

#. Tag: programlisting
#: Spring.xml:310
#, fuzzy, no-c-format
msgid ""
"<![CDATA[<components xmlns=\"http://jboss.org/schema/seam/components\"\n"
"            xmlns:spring=\"http://jboss.org/schema/seam/spring\"\n"
"            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"            xsi:schemaLocation=\"http://jboss.org/schema/seam/components\n"
"                                http://jboss.org/schema/seam/components-"
"2.3.xsd\n"
"                                http://jboss.org/schema/seam/spring\n"
"                                http://jboss.org/schema/seam/spring-2.3.xsd"
"\">\n"
"\n"
"        <spring:context-loader config-locations=\"/WEB-INF/"
"applicationContext.xml\"/>\n"
"\n"
"</components>]]>"
msgstr ""
"<![CDATA[<components xmlns=\"http://jboss.org/schema/seam/components\"\n"
"            xmlns:spring=\"http://jboss.org/schema/seam/spring\"\n"
"            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"            xsi:schemaLocation=\"http://jboss.org/schema/seam/components\n"
"                                http://jboss.org/schema/seam/components-"
"2.1.xsd\n"
"                                http://jboss.org/schema/seam/spring\n"
"                                http://jboss.org/schema/seam/spring-2.1.xsd"
"\">\n"
"\n"
"        <spring:context-loader config-locations=\"/WEB-INF/"
"applicationContext.xml\"/>\n"
"\n"
"</components>]]>"

#. Tag: title
#: Spring.xml:313
#, no-c-format
msgid "Using a Spring TaskExecutor for @Asynchronous"
msgstr "@Asynchronous に Spring の TaskExecutor を使用する"

#. Tag: para
#: Spring.xml:315
#, no-c-format
msgid ""
"Spring provides an abstraction for executing code asynchronously called a "
"<literal>TaskExecutor</literal>. The Spring Seam integration allows for the "
"use of a Spring <literal>TaskExecutor</literal> for executing immediate "
"<literal>@Asynchronous</literal> method calls. To enable this functionality "
"install the <literal>SpringTaskExecutorDispatchor</literal> and provide a "
"spring bean defined taskExecutor like so:"
msgstr ""
"Spring はコードを非同期に実行するために <literal>TaskExecutor</literal> と呼"
"ばれる抽象を提供します。 Spring Seam 統合では <literal>@Asynchronous</"
"literal> メソッドのコールを直ちに実行するために Spring の "
"<literal>TaskExecutor</literal> を使用できます。 この機能を有効にするには "
"<literal>SpringTaskExecutorDispatchor</literal> をインストールしてから次のよ"
"うに Spring Bean 定義の taskExecutor を与えます。"

#. Tag: programlisting
#: Spring.xml:320
#, no-c-format
msgid ""
"<![CDATA[<spring:task-executor-dispatcher task-executor=\"#"
"{springThreadPoolTaskExecutor}\"/>]]>"
msgstr ""
"<![CDATA[<spring:task-executor-dispatcher task-executor=\"#"
"{springThreadPoolTaskExecutor}\"/>]]>"

#. Tag: para
#: Spring.xml:322
#, no-c-format
msgid ""
"Because a Spring <literal>TaskExecutor</literal> does not support scheduling "
"of an asynchronous event a fallback Seam <literal>Dispatcher</literal> can "
"be provided to handle scheduled asynchronous event like so:"
msgstr ""
"Spring の <literal>TaskExecutor</literal> は非同期イベントのスケジューリング"
"には対応しないため、 代替となる Seam <literal>Dispatcher</literal> を与えて次"
"のようにスケジュールされた非同期イベントを処理することができます。"

#. Tag: programlisting
#: Spring.xml:325
#, no-c-format
msgid ""
"<![CDATA[<!-- Install a ThreadPoolDispatcher to handle scheduled "
"asynchronous event -->\n"
"<core:thread-pool-dispatcher name=\"threadPoolDispatcher\"/>\n"
"\n"
"<!-- Install the SpringDispatcher as default -->\n"
"<spring:task-executor-dispatcher task-executor=\"#"
"{springThreadPoolTaskExecutor}\" schedule-dispatcher=\"#"
"{threadPoolDispatcher}\"/>]]>"
msgstr ""
"<![CDATA[<!-- Install a ThreadPoolDispatcher to handle scheduled "
"asynchronous event -->\n"
"<core:thread-pool-dispatcher name=\"threadPoolDispatcher\"/>\n"
"\n"
"<!-- Install the SpringDispatcher as default -->\n"
"<spring:task-executor-dispatcher task-executor=\"#"
"{springThreadPoolTaskExecutor}\" schedule-dispatcher=\"#"
"{threadPoolDispatcher}\"/>]]>"
